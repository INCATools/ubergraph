#define REFERENCE_COUNT "<http://reasoner.renci.org/vocab/referenceCount>"
#define HAS_NORMALIZED_IC "<http://reasoner.renci.org/vocab/normalizedInformationContent>"

.functor logn(x: float): float

.decl rdf(s: symbol, p: symbol, o: symbol)
.decl references(sub: symbol, super: symbol)
.decl term(t: symbol)
.decl totalTerms(c: number)
.decl referenceCount(term: symbol, c: number)
.decl maxIC(n: float)
.decl normalizedIC(term: symbol, ic: float)
.decl icRDF(term: symbol, predicate: symbol, ic: float, dot: symbol)
.decl scRDF(term: symbol, predicate: symbol, c: number, dot: symbol)

references(sub, super) :- rdf(sub, _, super).

term(t) :- references(t, _).

totalTerms(c) :- c = count : { term(_) }.

referenceCount(t, c) :- term(t), c = count : { references(_, t) }.

maxIC(-@logn(1.0/to_float(n))) :- totalTerms(n).

normalizedIC(t, (-@logn(to_float(c)/to_float(total)))*scale) :- referenceCount(t, c), totalTerms(total), maxIC(maxic), scale=100.0/maxic.

icRDF(term, HAS_NORMALIZED_IC, ic, ".") :- normalizedIC(term, ic).

scRDF(term, REFERENCE_COUNT, c, ".") :- referenceCount(term, c).

// sed 's/ /\t/' <ontology.nt | sed 's/ /\t/' | sed 's/ \.$//' >rdf.facts
.input rdf
.output icRDF
.output scRDF
